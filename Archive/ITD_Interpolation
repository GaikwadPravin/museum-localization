def find_min(current_val):
    while True:
        current_val = current_val - 1
        min_exists = current_val in ITD_Elevation0
        if min_exists:
            return current_val
            break
            
            
def find_max(current_val):
    while True:
        current_val = current_val + 1
        max_exists = current_val in ITD_Elevation0
        if max_exists:
            return current_val
            break


AZIMUTHS = [-75, -70, -60, -50, 50, 60, 70, 75]
ITD_Elevation0 = {-80: 27.25, -65: 22.75, -55: 19.125, -45: 15.25, -40: 13.875, -35: 12.625, -30: 11.5, -25: 9.125,
                  -20: 6.875, -15: 5.375, -10:4.375, -5: 3, 0: 0.75, 5: 1.375, 10: 2.75, 15: 3.875, 20: 5.50, 25: 7.625,
                  30: 9.75, 35: 11.25, 40: 12.50, 45: 14.125, 55: 18.125, 65: 22.125, 80: 27}
ITD_Elevation180 = {-80: 26.75, -65: 22.75, -55: 20.625, -45: 18.375, -40: 16.625, -35: 14.75, -30: 12.25, -25: 10.875,
                    -20: 10, -15: 7.75, -10: 5.50, -5: 2.50, 0: 0.875, 5: 0, 10: 2.625, 15: 5, 20: 8, 25: 9.25,
                    30: 10.375, 35: 12.75, 40: 14.875, 45: 17.125, 55: 19.875, 65: 22.250, 80: 26.750}

for currAzimuth in AZIMUTHS:
    azimuthMin = find_min(currAzimuth)
    azimuthMax = find_max(currAzimuth)
    delayMin = ITD_Elevation0[azimuthMin]
    delayMax = ITD_Elevation0[azimuthMax]
    scale_factor = abs(currAzimuth - azimuthMin)/abs(find_max(currAzimuth) - azimuthMin)
    delay = (1 - scale_factor) * delayMin + scale_factor * delayMax
    print(delay)
